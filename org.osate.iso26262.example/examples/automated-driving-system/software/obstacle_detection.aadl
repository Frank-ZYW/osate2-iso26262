package aadlbook::software::obstacle_detection

public

with aadlbook::icd; 
with sei;

--------------------------
--  Obstacle Detection  --
--------------------------

process obstacle_detection
features
	camera : in data port aadlbook::icd::obstacle_position.i;
	radar : in data port aadlbook::icd::obstacle_position.i;
	obstacle_position : out data port aadlbook::icd::obstacle_position.i;
flows
	f0 : flow path camera -> obstacle_position;
	f1 : flow path radar -> obstacle_position;
annex EMV2 {**
	use types 		ErrorLibrary;
	use behavior  	lib::FailStop;

	error propagations
		camera : in propagation {ItemOmission,OutOfRange};
		radar : in propagation {ItemOmission,OutOfRange};
		obstacle_position : out propagation {ItemOmission};
		processor : in propagation {ServiceError};
	flows
		ef0 : error path camera{ItemOmission} -> obstacle_position{ItemOmission};
		ef1 : error path radar{ItemOmission} -> obstacle_position{ItemOmission};
		ef2 : error path processor{ServiceError} -> obstacle_position{ItemOmission};
		ef3 : error path processor{ServiceError} -> obstacle_position{ItemOmission};
	end propagations;

	component error behavior
	transitions
		t0 : Operational -[processor{ServiceError}]-> FailStop;
		t1 : FailStop -[processor{NoError}]-> Operational;
	propagations
	   	p1 : FailStop -[]-> obstacle_position{ItemOmission};
	end component;
	properties
		ISO26262::hazards =>([ HazardName =>"Obstacle recognition failure";
				  SafetyDescription=>"Determines whether there is an actual obstacle on the road";]) applies to  FailStop;
		ISO26262::hazards =>([ HazardName =>"Loss of obstacle_position";
				  SafetyDescription=>"Output the obstacle position";]) applies to  obstacle_position.ItemOmission; 
		ISO26262::FMEDASafetyProperties => [FailureRate => 0.01; SafetyRelated => false;] applies to FmedaState;	
		ISO26262::FailureMode => [	ModeName => "Unable to handle and output the correct speed";
				  	  			 	Distribution => 100.0;
				  	  				Violate_SP_Satety => false;
--				  	  				SPF_SM => "SM2";
--					  				SPF_DC => 95.0;
				 	  				Violate_MP_Satety => false;
				  				] applies to FailStop;	
		EMV2::OccurrenceDistribution => [ ProbabilityValue => 0.5e-5 ; Distribution => Poisson;] applies to Failure;
		EMV2::OccurrenceDistribution => [ ProbabilityValue => 0.5e-5 ; Distribution => Poisson;] applies to processor.ServiceError;
**};
end obstacle_detection;

process implementation obstacle_detection.i
subcomponents
	thr : thread obstacle_detection_thr;
connections
	c0 : port camera -> thr.camera;
	c1 : port radar -> thr.radar;
	c2 : port thr.obstacle_detected -> obstacle_position;
flows
	f0 : flow path camera -> c0 -> thr.f0 -> c2 -> obstacle_position;
	f1 : flow path radar -> c1 -> thr.f1 -> c2 -> obstacle_position;
end obstacle_detection.i;

thread obstacle_detection_thr
features
	camera : in data port aadlbook::icd::obstacle_position.i;
	radar : in data port aadlbook::icd::obstacle_position.i;
	obstacle_detected : out data port aadlbook::icd::obstacle_position.i;
flows
	f0 : flow path camera -> obstacle_detected;
	f1 : flow path radar -> obstacle_detected;
properties
	Dispatch_Protocol => Periodic;
	Period            => 100ms;
	Compute_Execution_Time => 20 ms .. 50 ms; 
	sei::mipsbudget   => 10.0 MIPS; 
	sei::instructionsperdispatch => 0.9 kipd .. 0.98 mipd; 
--	reference_processor => classifier (aadlbook::platform::ecu);
end obstacle_detection_thr;

end aadlbook::software::obstacle_detection;
